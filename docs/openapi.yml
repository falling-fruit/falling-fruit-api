openapi: 3.0.0
info:
  title: Falling Fruit API
  description: |
    Falling Fruit is an open-technology nonprofit mapping the world's edible plants and developing online platforms to promote urban foraging and hyperlocal food. This API provides access to the Falling Fruit database. It is a work in progress and does not provide access to all possible database tables or fields. Many features on the website (https://fallingfruit.org) still rely on the older Rails API.

    ### General usage

    - GET requests rely on path and query parameters.
    - POST and PUT requests rely on path parameters and body content. If the request includes a file, a `multipart/form-data` body is used with a `json` key (if needed) whose value is a JSON-formatted string; otherwise, raw JSON is used.
    - The values of array query parameters are comma-delimited, e.g. `types=1,2,3`, and arrays of arrays are pipe-delimited, e.g. `bounds=-85,-180|85,180`.
    - All endpoints return JSON responses.
    - Success and error responses use conventional HTTP status codes: `2xx` for success (implemented: `200`), `4xx` for incorrect requests (implemented: `400`, `401`, `403`), and `5xx` for server errors (not implemented). `4xx` errors will typically include an error message.

    ### Security

    - All endpoints (other than `GET` endpoints intended for email links) require authentication via an API key (header `x-api-key`).
    - `POST` and `PUT` requests may accept (or require) an access token (header `Authorization: Bearer {token}`), in which case the action is associated with that user.
    - Access tokens are acquired by submitting registered user credentials (`email` and `password`).

    ### TODO

    - Security
      - Add `POST /user/confirmation` for use by client on redirect from email confirmation link.
      - Return user email from `user/confirmation` endpoints.
      - Require a reCAPTCHA for `POST` and `PUT` requests without a token (https://developers.google.com/recaptcha/docs/verify, https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html, https://www.npmjs.com/package/express-recaptcha).
      - Add session endpoints `POST /user/session`, `DELETE /user/session` (?).
    - Photos
      - Run background job to delete expired photos from database and AWS S3 bucket.
    - Public endpoints
      - View recent changes (https://fallingfruit.org/changes).
    - User endpoints
      - View user activity (https://fallingfruit.org/home).
      - Change and confirm email.
      - Delete account with `DELETE /user`.
      - Change password while logged in (?).
    - I/O:
      - Translate emails, errors, and messages (https://github.com/lingui/js-lingui, https://github.com/phrase/phrase-cli).
      - Return `5xx` for server errors, currently included in `400`.
      - Validate requests, and responses in development (https://github.com/cdimascio/express-openapi-validator).
      - Return coded error objects for client-side translation to the user.
    - Existing and new features
      - Invasive species filter
      - User foraging range and weekly digests
      - Type filters
      - Preferred user locale
      - ...
    - Admin endpoints
      - View and resolve problem reports (https://fallingfruit.org/problems).
      - Merge types (https://fallingfruit.org/types).
      - Add and edit imports (https://fallingfruit.org/datasets, https://fallingfruit.org/imports/436).
      - View and edit users (https://fallingfruit.org/users/edit).
  version: '0.3'
  contact:
    email: info@fallingfruit.org
    url: 'https://fallingfruit.org'
    name: Falling Fruit
tags:
  - name: Authentication
    description: 'User authentication, credentials, and account management.'
  - name: Types
    description: 'Types describe the plants, fungi, or other resources present at a Location.'
  - name: Locations
    description: Locations describe resources at a particular position in the world.
  - name: Reviews
    description: 'Reviews describe observations of, and opinions about, a Location.'
  - name: Photos
    description: Review photos.
  - name: Clusters
    description: |-
      Clusters reduce the Locations in an area to a count and a center of mass. They are computed on a nested [quadtree](https://en.wikipedia.org/wiki/Quadtree) which, for a given zoom level, divides the Earth into a 2<sup>zoom</sup> x 2<sup>zoom</sup> grid of equal-sized squares in the Web Mercator projection (EPSG:3857).

      Note that Clusters count the number of Location Types, not Locations. So, for example, a Location with two Types is counted twice.
  - name: Reports
    description: Users can submit problem reports for admin review.
  - name: Imports
    description: Imported datasets.
paths:
  /clusters:
    get:
      summary: Fetch Clusters.
      tags:
        - Clusters
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/bounds'
        - $ref: '#/components/parameters/zoom'
        - $ref: '#/components/parameters/muni'
        - $ref: '#/components/parameters/types'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cluster'
  /imports:
    get:
      summary: Fetch Imports.
      tags:
        - Imports
      security:
        - key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Import'
  '/imports/{id}':
    get:
      summary: Fetch Import.
      tags:
        - Imports
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/import_id'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Import'
  /locations:
    get:
      summary: Fetch Location summaries.
      tags:
        - Locations
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/bounds'
        - $ref: '#/components/parameters/muni'
        - $ref: '#/components/parameters/types'
        - name: limit
          in: query
          description: Maximum number of Locations to return.
          schema:
            type: integer
            minimum: 0
            default: 1000
        - name: offset
          in: query
          description: Offset from which to apply `limit`.
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: center
          in: query
          description: 'Center `latitude,longitude` in WGS84 decimal degrees. If provided, Locations are returned in order of increasing distance and the distance to each Location is returned. Longitude must be in the interval [-180, 180] and latitude in the interval [-90, 90].'
          explode: false
          schema:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: number
              minimum: -180
              maximum: 180
            example:
              - 1.359
              - 103.807
        - name: photo
          in: query
          description: 'Whether to include the path to a review photo thumbnail, if available.'
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListLocation'
    post:
      tags:
        - Locations
      summary: Create a Location.
      description: 'A `review` can be included, in which case the result includes the `reviews` property.'
      security:
        - key: []
        - key: []
          token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddLocation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  /locations/count:
    get:
      summary: Count Locations.
      tags:
        - Locations
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/bounds'
        - $ref: '#/components/parameters/muni'
        - $ref: '#/components/parameters/types'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: number
                example: 25
  '/locations/{id}':
    get:
      summary: Fetch a Location.
      tags:
        - Locations
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/location_id'
        - name: embed
          description: |
            Additional information to include.
            - reviews: Location reviews.
            - import: Imported dataset.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - reviews
                - import
            default: null
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    put:
      tags:
        - Locations
      summary: Edit a Location.
      security:
        - key: []
        - key: []
          token: []
      parameters:
        - $ref: '#/components/parameters/location_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditLocation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  '/locations/{id}/reviews':
    get:
      summary: Fetch a Location's Reviews.
      tags:
        - Reviews
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/location_id'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    post:
      summary: Review a Location.
      tags:
        - Reviews
      security:
        - key: []
        - key: []
          token: []
      parameters:
        - $ref: '#/components/parameters/location_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReview'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
  /photos:
    post:
      tags:
        - Photos
      summary: Upload a photo.
      security:
        - key: []
        - key: []
          token: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  description: 'File to upload (jpeg, png, webp, gif, or svg). Images are converted to jpeg and resized as needed to a maximum dimension of 2048 pixels.'
                  type: string
                  format: binary
                  nullable: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
  '/reviews/{id}':
    get:
      summary: Fetch a Review.
      tags:
        - Reviews
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/review_id'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
    put:
      tags:
        - Reviews
      summary: Edit a Review (author only).
      security:
        - key: []
          token: []
      parameters:
        - $ref: '#/components/parameters/review_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReview'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
  /types:
    get:
      summary: Fetch Types.
      tags:
        - Types
      security:
        - key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Type'
    post:
      summary: Submit new Type.
      tags:
        - Types
      security:
        - key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Type'
  '/types/{id}':
    get:
      summary: Fetch Type.
      tags:
        - Types
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/type_id'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
  /types/counts:
    get:
      summary: Count Types.
      tags:
        - Types
      security:
        - key: []
      parameters:
        - $ref: '#/components/parameters/bounds'
        - $ref: '#/components/parameters/muni'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeCount'
  /reports:
    post:
      tags:
        - Reports
      summary: Create a Report.
      security:
        - key: []
        - key: []
          token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReport'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
  /user:
    post:
      summary: Register a new user.
      description: |
        When first created, the account is not confirmed (`confirmed_at: null`) and cannot be used.
        An email is sent with a link that must be clicked to confirm the account.

        `email` cannot match (case-insensitive) the email of an existing user.
      tags:
        - Authentication
      security:
        - key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: '#/components/schemas/User/allOf/3/properties/email'
                password:
                  description: Password.
                  type: string
                  example: f00!bar
                name:
                  $ref: '#/components/schemas/EditUser/allOf/0/properties/name'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You will receive an email with instructions for how to confirm your email address in a few minutes
    get:
      summary: View the user (self).
      tags:
        - Authentication
      security:
        - key: []
          token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Edit the user (self).
      tags:
        - Authentication
      security:
        - key: []
          token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/EditUser/allOf/0/properties/name'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/confirmation:
    get:
      summary: Confirm the user (from a link in an email).
      tags:
        - Authentication
      parameters:
        - name: id
          description: User ID.
          in: query
          schema:
            type: integer
          required: true
          example: 123
        - name: expires
          description: Confirmation link expiration in milliseconds since the UNIX epoch (1 January 1970).
          in: query
          schema:
            type: integer
          required: true
          example: 1636553249490
        - name: signature
          description: Cryptographic signature.
          in: query
          schema:
            type: string
          required: true
          example: 231dc7ce4da196b93624d4c49b32978b5205970b713a67f3dab61d4b7ec5e25d
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your email address has been successfully confirmed
  /user/confirmation/retry:
    post:
      summary: Request another email-confirmation email.
      tags:
        - Authentication
      security:
        - key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  $ref: '#/components/schemas/User/allOf/3/properties/email'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You will receive an email with instructions for how to confirm your email address in a few minutes
  /user/token:
    post:
      summary: Request an access token.
      description: 'Follows the OAuth2 spec for password flow, which requires form data with `username` and `password`.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: '#/components/schemas/User/allOf/3/properties/email'
                password:
                  $ref: '#/paths/~1user/post/requestBody/content/application~1json/schema/properties/password'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /user/password:
    put:
      summary: Set a new password.
      tags:
        - Authentication
      security:
        - key: []
      parameters:
        - name: id
          description: User ID.
          in: query
          schema:
            type: integer
          required: true
          example: 123
        - name: token
          description: Password reset token.
          in: query
          schema:
            type: string
          required: true
          example: 1972f009f210ebb55863c616631f4ad28eff6600e7b7518cd51062d15d7faef0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  $ref: '#/paths/~1user/post/requestBody/content/application~1json/schema/properties/password'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your password has been changed successfully
  /user/password/reset:
    post:
      summary: Request a password-reset email.
      tags:
        - Authentication
      security:
        - key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  $ref: '#/components/schemas/User/allOf/3/properties/email'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You will receive an email with instructions on how to reset your password in a few minutes
components:
  securitySchemes:
    key:
      type: apiKey
      name: x-api-key
      in: header
    token:
      type: oauth2
      flows:
        password:
          tokenUrl: user/token
          scopes: {}
  parameters:
    bounds:
      name: bounds
      description: 'The southwest and northeast corners of the bounding box in WGS84 decimal degrees, in the format `swlat,swlng|nelat,nelng`. Latitude must be in the interval [-85.0511, 85.0511] and longitude must be in the interval [-180, 180].'
      in: query
      explode: false
      style: pipeDelimited
      required: true
      schema:
        type: array
        minItems: 2
        maxItems: 2
        items:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
            minimum: -180
            maximum: 180
        example:
          - - -5
            - -180
          - - 5
            - 180
    zoom:
      name: zoom
      description: 'Zoom level, where the world is divided into a 2<sup>zoom</sup> x 2<sup>zoom</sup> grid.'
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 13
        default: 0
    muni:
      name: muni
      description: Whether to include Locations imported from municipal tree inventories.
      in: query
      schema:
        type: boolean
        default: true
    types:
      name: types
      description: IDs of Types to include (all by default).
      in: query
      explode: false
      schema:
        type: array
        items:
          type: integer
          minimum: 0
        default: null
    location_id:
      name: id
      in: path
      description: Location ID.
      required: true
      schema:
        type: integer
        minimum: 0
    type_id:
      name: id
      in: path
      description: Type ID.
      required: true
      schema:
        type: integer
        minimum: 0
    review_id:
      name: id
      in: path
      description: Review ID.
      required: true
      schema:
        type: integer
        minimum: 0
    user_id:
      name: id
      in: path
      description: User ID.
      required: true
      schema:
        type: integer
        minimum: 0
    import_id:
      name: id
      in: path
      description: Import ID.
      required: true
      schema:
        type: integer
        minimum: 0
  schemas:
    IdField:
      required:
        - id
      properties:
        id:
          description: Unique identifier.
          type: integer
          minimum: 0
          example: 42
    LatLngFields:
      properties:
        lat:
          description: Latitude in WGS84 decimal degrees.
          type: number
          minimum: -85.0511
          maximum: 85.0511
          example: 45.6789
        lng:
          description: Longitude in WGS84 decimal degrees.
          type: number
          minimum: -180
          maximum: 180
          example: -123.45678
    DateFields:
      required:
        - created_at
        - updated_at
      properties:
        created_at:
          description: 'Date and time created in format YYYY-MM-DDThh:mm:ss.sssZ.'
          type: string
          format: date-time
          example: '2014-06-19T01:02:03.456Z'
        updated_at:
          description: 'Date and time last updated in format YYYY-MM-DDThh:mm:ss.sssZ.'
          type: string
          format: date-time
          example: '2014-07-20T12:34:56.789Z'
    Cluster:
      title: Cluster
      description: Number of Locations in an area.
      allOf:
        - $ref: '#/components/schemas/LatLngFields'
        - type: object
          required:
            - lat
            - lng
            - count
          properties:
            count:
              type: integer
              description: Number of Locations. Locations with multiple Types are counted as their number of Types.
              minimum: 1
              example: 768
    TypeCount:
      title: Type count
      description: Number of Location Types in an area.
      type: object
      required:
        - id
        - count
      properties:
        id:
          type: integer
          description: Type ID.
          minimum: 0
          example: 1
        count:
          type: integer
          description: Number of Locations with that Type ID.
          minimum: 1
          example: 12
    BaseType:
      title: Type (base)
      description: Type properties that can be edited.
      type: object
      properties:
        parent_id:
          description: Type ID of taxonomic parent.
          type: integer
          nullable: true
          minimum: 0
          example: 114
        pending:
          description: Whether pending admin review. This is always true unless set to false by an admin (not implemented).
          type: boolean
          example: true
          default: true
        scientific_names:
          description: |
            Scientific names, starting with the preferred synonym.
            - Genus (or higher rank): Prunus
            - Subgenus: Prunus subg. Amygdalus
            - Species: Prunus domestica
            - Subspecies: Prunus domestica subsp. domestica, Prunus persica var. nucipersica, Brassica oleracea var. capitata f. rubra
            - Hybrid: Prunus x eminens, Prunus cerasus x Prunus fruticosa
            - Cultivar: Prunus persica 'George IV', Prunus domestica subsp. domestica 'Italian', Acer truncatum x platanoides 'Keithsform'
          type: array
          items:
            type: string
          example:
            - Malus pumila
            - Malus domestica
            - Malus communis
        taxonomic_rank:
          description: |
            Taxonomic rank.
            - 0: Polyphyletic
            - 1: Kingdom
            - 2: Phylum
            - 3: Class
            - 4: Order
            - 5: Family
            - 6: Genus
            - 7: Multispecies
            - 8: Species
            - 9: Subspecies
          type: integer
          minimum: 0
          maximum: 9
          nullable: true
          example: 8
        common_names:
          description: 'Common names, starting with the preferred synonym, by language code (e.g. `en`) and optional region code (e.g. `en_us`). Currently, only `en` can be set.'
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            ar:
              - تفاح
            de:
              - Apfel
            el:
              - Μηλιά
            en:
              - Apple
              - Orchard apple
              - Paradise apple
            es:
              - Pero
            fr:
              - Pommier commun
            he:
              - תפוח תרבותי
            it:
              - Melo
            nl:
              - Appel
            pl:
              - Jabłoń domowa
            pt_br:
              - Maçã
            sk:
              - Jablko
            sv:
              - Jabolko
            tr:
              - Elma
            zh_tw:
              - 蘋果
    SubmitType:
      title: Type (submit)
      description: Type properties that can be submitted. At least one name (in `common_names.en` or `scientific_names`) is required.
      allOf:
        - $ref: '#/components/schemas/BaseType'
        - type: object
          properties:
            notes:
              description: Submission notes.
              type: string
              nullable: true
              example: The fruit are edible once cooked.
    Type:
      title: Type
      description: All Type properties.
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/DateFields'
        - $ref: '#/components/schemas/BaseType'
        - type: object
          required:
            - parent_id
            - pending
            - scientific_names
            - taxonomic_rank
            - common_names
            - urls
          properties:
            urls:
              description: |
                Links to more information, by resource code.
                - wikipedia: English Wikipedia (https://en.wikipedia.org)
                - eat_the_weeds: Eat the Weeds (https://www.eattheweeds.com)
                - foraging_texas: Foraging Texas (https://www.foragingtexas.com)
                - urban_mushrooms: Urban Mushrooms (http://urbanmushrooms.com)
                - fruitipedia: Fruitipedia (http://www.fruitipedia.com)
                - usda: USDA Plants Database (https://plants.usda.gov)
              type: object
              additionalProperties:
                type: string
              example:
                wikipedia: 'https://en.wikipedia.org/wiki/Malus_domestica'
                eat_the_weeds: 'https://www.eattheweeds.com/apples-wild-crabapples'
    ListLocation:
      title: Location (list)
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/LatLngFields'
        - type: object
          required:
            - lat
            - lng
            - type_ids
          properties:
            type_ids:
              description: Type IDs.
              type: array
              items:
                type: integer
                minimum: 0
              example:
                - 97
                - 92
            distance:
              description: Distance in meters from provided centerpoint.
              type: number
              minimum: 0
              example: 47.915
            photo:
              description: 'Path to review photo thumbnail, if available.'
    EditLocation:
      title: Location (edit)
      description: Location properties that can be edited.
      allOf:
        - $ref: '#/components/schemas/LatLngFields'
        - type: object
          required:
            - lat
            - lng
            - type_ids
          properties:
            type_ids:
              description: Type IDs.
              type: array
              items:
                type: integer
                minimum: 0
              example:
                - 97
                - 92
            unverified:
              description: Whether suspected to be wrong in some way and requires verification.
              type: boolean
              example: false
            access:
              description: |
                Access level.
                - 0: Location is on my property.
                - 1: I have permission from the owner to add this Location.
                - 2: Location is on public land.
                - 3: Location is on private property but overhangs public property.
                - 4: Location is on private property.
              type: integer
              enum:
                - 0
                - 1
                - 2
                - 3
                - 4
              nullable: true
              example: 3
            description:
              description: Description.
              type: string
              nullable: true
              example: Two mulberry trees with a few low branches overhanging the sidewalk.
            season_start:
              description: First month in season (zero-based).
              type: integer
              minimum: 0
              maximum: 11
              example: 6
            season_stop:
              description: Last month in season (zero-based).
              type: integer
              minimum: 0
              maximum: 11
              example: 8
    AddLocation:
      title: Location (add)
      description: Location properties that can be added.
      allOf:
        - $ref: '#/components/schemas/EditLocation'
        - type: object
          properties:
            review:
              $ref: '#/components/schemas/EditReview'
    Location:
      title: Location
      description: All Location properties.
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/EditLocation'
        - $ref: '#/components/schemas/DateFields'
        - type: object
          required:
            - lat
            - lng
            - type_ids
            - author
            - unverified
            - access
            - address
            - city
            - state
            - country
            - description
            - season_start
            - season_stop
            - muni
          properties:
            author:
              description: Author name. Either a hardcoded `author` or the current `name` of the associated User.
              type: string
              nullable: true
              example: Ethan
            address:
              description: Address. Either provided for imported locations whose coordinates had to be geocoded from the address or reverse-geocoded from coordinates.
              type: string
              nullable: true
              example: '748 10th Street, Boulder CO 80302, USA'
            city:
              description: City (reverse-geocoded from coordinates).
              type: string
              nullable: true
              example: Boulder
            state:
              description: State (reverse-geocoded from coordinates).
              type: string
              nullable: true
              example: Colorado
            country:
              description: County (reverse-geocoded from coordinates).
              type: string
              nullable: true
              example: United States
            muni:
              description: Whether imported from a municipal tree inventory.
              type: boolean
              nullable: false
              example: false
            import_id:
              description: Import ID.
              type: integer
              nullable: true
              minimum: 0
              example: 42
            import:
              $ref: '#/components/schemas/Import'
            reviews:
              description: Location reviews.
              type: array
              items:
                $ref: '#/components/schemas/Review'
    BaseReview:
      title: Review (base)
      type: object
      properties:
        comment:
          description: Comment.
          type: string
          nullable: true
          example: The sidewalk is stained red with mulberries.
        observed_on:
          description: Date visited in format YYYY-MM-DD.
          type: string
          format: date-time
          nullable: true
          example: '2014-06-19'
        fruiting:
          description: Fruiting status.
          type: integer
          enum:
            - 0
            - 1
            - 2
          nullable: true
          example: 2
        quality_rating:
          description: Quality rating.
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
          nullable: true
          example: 2
        yield_rating:
          description: Yield rating.
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
          nullable: true
          example: 3
    EditReview:
      title: Review (edit)
      description: Review properties that can be edited.
      allOf:
        - $ref: '#/components/schemas/BaseReview'
        - type: object
          properties:
            photo_ids:
              description: IDs of photos to link to the review. Previously linked photos are unlinked if their ids are omitted. Photos are ordered by the order of their ids.
              type: array
              items:
                type: integer
                minimum: 0
              example:
                - 3
                - 1
                - 2
    Review:
      title: Review
      description: Observations of and opinions about a Location.
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/BaseReview'
        - $ref: '#/components/schemas/DateFields'
        - type: object
          required:
            - location_id
            - user_id
            - author
            - comment
            - fruiting
            - quality_rating
            - yield_rating
            - observed_on
            - created_at
            - updated_at
            - photos
          properties:
            location_id:
              description: Location ID.
              type: integer
              minimum: 0
              example: 3383
            user_id:
              description: User ID.
              type: integer
              nullable: true
              minimum: 0
              example: 1
            author:
              description: Author name. Either a hardcoded `author` or the current `name` of the associated User.
              type: string
              nullable: true
              example: Ethan
            photos:
              type: array
              items:
                $ref: '#/components/schemas/Photo'
    Photo:
      title: Photo
      description: Location photo.
      type: object
      required:
        - id
        - thumb
        - medium
        - original
      properties:
        id:
          description: Photo ID.
          type: integer
          minimum: 1
          example: 2745
        thumb:
          description: Path to thumbnail (longest dimension <= 100 px).
          type: string
          format: uri
          example: 'http://s3-us-west-2.amazonaws.com/fallingfruit-production/observations/photos/000/002/745/thumb/open-uri20131213-3992-1szjh9k.jpg'
        medium:
          description: Path to medium size file (longest dimension <= 300 px).
          type: string
          format: uri
          example: 'http://s3-us-west-2.amazonaws.com/fallingfruit-production/observations/photos/000/002/745/medium/open-uri20131213-3992-1szjh9k.jpg'
        original:
          description: Path to large size file (longest dimension <= 2048 px).
          type: string
          format: uri
          example: 'http://s3-us-west-2.amazonaws.com/fallingfruit-production/observations/photos/000/002/745/original/open-uri20131213-3992-1szjh9k.jpg'
    EditUser:
      title: User (edit)
      allOf:
        - type: object
          required:
            - name
          properties:
            name:
              description: Display name.
              type: string
              example: Ethan
              nullable: true
    User:
      title: User
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/DateFields'
        - $ref: '#/components/schemas/EditUser'
        - type: object
          required:
            - email
            - confirmed_at
            - roles
          properties:
            email:
              description: Email.
              type: string
              format: email
              example: foo@bar.com
            confirmed_at:
              description: 'Date and time confirmed in format YYYY-MM-DDThh:mm:ss.sssZ.'
              type: string
              format: date-time
              example: '2014-07-20T12:34:56.789Z'
              nullable: true
            roles:
              description: |
                Roles.
                - user: Regular user.
                - admin: Administrator.
              type: array
              items:
                type: string
                enum:
                  - user
                  - admin
              example:
                - user
    EditReport:
      title: Report (edit)
      description: Report properties that can be edited.
      type: object
      required:
        - location_id
        - problem_code
      properties:
        location_id:
          description: Location ID.
          type: integer
          minimum: 0
          example: 3383
        problem_code:
          description: |
            Problem code.
            - 0: Location is spam
            - 1: Location does not exist
            - 2: Location is a duplicate
            - 3: Inappropriate review photo
            - 4: Inappropriate review comment
            - 5: Other (explain below)
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
          example: 1
        comment:
          description: Comment.
          type: string
          nullable: true
          example: This tree was cut down.
        email:
          description: 'Email to use for correspondence. If authenticated, defaults to the user''s email. Otherwise, it is required.'
          type: string
          format: email
          example: foo@bar.com
        name:
          description: 'Name to use for correspondence. If authenticated, defaults to the user''s name.'
          type: string
          nullable: true
          example: Ethan
    Report:
      title: Report
      description: Report of a problem with a Location.
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/EditReport'
        - $ref: '#/components/schemas/DateFields'
        - type: object
          properties:
            reporter_id:
              description: ID of reporting User (if authenticated).
              type: integer
              minimum: 0
              nullable: true
              example: 321
            resolution_code:
              description: |
                Resolution code.
                - 0: Made no changes
                - 1: Edited the location
                - 2: Deleted the location
                - 3: Deleted the photo
                - 4: Deleted the review
                - 5: Hid the location
              type: integer
              enum:
                - 0
                - 1
                - 2
                - 3
                - 4
                - 5
              nullable: true
              example: 2
            response:
              description: Response comment.
              type: string
              nullable: true
              example: Thank you for alerting us!
            responder_id:
              description: ID of responding User.
              type: integer
              minimum: 0
              nullable: true
    Import:
      title: Import
      description: Imported dataset.
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/DateFields'
        - type: object
          required:
            - name
            - url
            - comments
            - license
            - muni
            - location_count
          properties:
            name:
              description: Name.
              type: string
              nullable: false
              example: Les arbres de Grenoble
            url:
              description: Path to a description of the data.
              type: string
              nullable: true
              example: 'http://data.metropolegrenoble.fr/ckan/dataset/les-arbres-de-grenoble'
            comments:
              description: Description and import comments.
              type: string
              nullable: true
              example: 'Tree inventory of Grenoble, France.'
            license:
              description: License.
              type: string
              nullable: true
              example: 'Open Data Commons Open Database License (https://opendefinition.org/licenses/odc-odbl)'
            muni:
              description: Whether a municipal or university tree inventory.
              type: boolean
              nullable: false
              example: true
            location_count:
              description: Number of imported locations.
              type: integer
              minimum: 0
              nullable: false
              example: 1273
    Token:
      title: Token
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          description: Access token.
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMjMsInJvbGVzIjpbInVzZXIiXX0sImlhdCI6MTYzNjQ0NzA2OSwiZXhwIjoxNjM2NDQ3OTY5LCJhdWQiOiJodHRwczovL2ZhbGxpbmdmcnVpdC5vcmcvYXBpIiwic3ViIjoidXNlciJ9.6bFUlbCG3y1bl5dK6jmv5c45_2FGZchOJzZjvn5766A
        token_type:
          description: Token type.
          type: string
          enum:
            - bearer
          example: bearer
        expires_in:
          description: Seconds until the access token expires. It may expire earlier if revoked.
          type: integer
          minimum: 1
          example: 900
servers:
  - description: Falling Fruit test server.
    url: 'https://fallingfruit.org/test-api/0.3/'
  - description: SwaggerHub mock server.
    url: 'https://virtserver.swaggerhub.com/ezwelty/falling-fruit-api/0.3/'
  - description: Localhost.
    url: 'http://localhost:3300/test-api/0.3/'

